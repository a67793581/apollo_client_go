/*
 * 阿波罗客户端
 *
 * 阿波罗客户端
 *
 * API version: v0.0.2
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Lock struct for Lock
type Lock struct {
	NamespaceName *string `json:"namespaceName,omitempty"`
	LockedBy      *string `json:"lockedBy,omitempty"`
	IsLocked      *bool   `json:"isLocked,omitempty"`
}

// NewLock instantiates a new Lock object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLock() *Lock {
	this := Lock{}
	return &this
}

// NewLockWithDefaults instantiates a new Lock object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLockWithDefaults() *Lock {
	this := Lock{}
	return &this
}

// GetNamespaceName returns the NamespaceName field value if set, zero value otherwise.
func (o *Lock) GetNamespaceName() string {
	if o == nil || o.NamespaceName == nil {
		var ret string
		return ret
	}
	return *o.NamespaceName
}

// GetNamespaceNameOk returns a tuple with the NamespaceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lock) GetNamespaceNameOk() (*string, bool) {
	if o == nil || o.NamespaceName == nil {
		return nil, false
	}
	return o.NamespaceName, true
}

// HasNamespaceName returns a boolean if a field has been set.
func (o *Lock) HasNamespaceName() bool {
	if o != nil && o.NamespaceName != nil {
		return true
	}

	return false
}

// SetNamespaceName gets a reference to the given string and assigns it to the NamespaceName field.
func (o *Lock) SetNamespaceName(v string) {
	o.NamespaceName = &v
}

// GetLockedBy returns the LockedBy field value if set, zero value otherwise.
func (o *Lock) GetLockedBy() string {
	if o == nil || o.LockedBy == nil {
		var ret string
		return ret
	}
	return *o.LockedBy
}

// GetLockedByOk returns a tuple with the LockedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lock) GetLockedByOk() (*string, bool) {
	if o == nil || o.LockedBy == nil {
		return nil, false
	}
	return o.LockedBy, true
}

// HasLockedBy returns a boolean if a field has been set.
func (o *Lock) HasLockedBy() bool {
	if o != nil && o.LockedBy != nil {
		return true
	}

	return false
}

// SetLockedBy gets a reference to the given string and assigns it to the LockedBy field.
func (o *Lock) SetLockedBy(v string) {
	o.LockedBy = &v
}

// GetIsLocked returns the IsLocked field value if set, zero value otherwise.
func (o *Lock) GetIsLocked() bool {
	if o == nil || o.IsLocked == nil {
		var ret bool
		return ret
	}
	return *o.IsLocked
}

// GetIsLockedOk returns a tuple with the IsLocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lock) GetIsLockedOk() (*bool, bool) {
	if o == nil || o.IsLocked == nil {
		return nil, false
	}
	return o.IsLocked, true
}

// HasIsLocked returns a boolean if a field has been set.
func (o *Lock) HasIsLocked() bool {
	if o != nil && o.IsLocked != nil {
		return true
	}

	return false
}

// SetIsLocked gets a reference to the given bool and assigns it to the IsLocked field.
func (o *Lock) SetIsLocked(v bool) {
	o.IsLocked = &v
}

func (o Lock) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.NamespaceName != nil {
		toSerialize["namespaceName"] = o.NamespaceName
	}
	if o.LockedBy != nil {
		toSerialize["lockedBy"] = o.LockedBy
	}
	if o.IsLocked != nil {
		toSerialize["isLocked"] = o.IsLocked
	}
	return json.Marshal(toSerialize)
}

type NullableLock struct {
	value *Lock
	isSet bool
}

func (v NullableLock) Get() *Lock {
	return v.value
}

func (v *NullableLock) Set(val *Lock) {
	v.value = val
	v.isSet = true
}

func (v NullableLock) IsSet() bool {
	return v.isSet
}

func (v *NullableLock) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLock(val *Lock) *NullableLock {
	return &NullableLock{value: val, isSet: true}
}

func (v NullableLock) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLock) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
