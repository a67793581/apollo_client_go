/*
 * 阿波罗客户端
 *
 * 阿波罗客户端
 *
 * API version: v0.0.2
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// NamespaceInfo struct for NamespaceInfo
type NamespaceInfo struct {
	Name                       *string `json:"name,omitempty"`
	AppId                      *string `json:"appId,omitempty"`
	Comment                    *string `json:"comment,omitempty"`
	Format                     *string `json:"format,omitempty"`
	IsPublic                   *bool   `json:"isPublic,omitempty"`
	DataChangeCreatedBy        *string `json:"dataChangeCreatedBy,omitempty"`
	DataChangeLastModifiedBy   *string `json:"dataChangeLastModifiedBy,omitempty"`
	DataChangeCreatedTime      *string `json:"dataChangeCreatedTime,omitempty"`
	DataChangeLastModifiedTime *string `json:"dataChangeLastModifiedTime,omitempty"`
}

// NewNamespaceInfo instantiates a new NamespaceInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNamespaceInfo() *NamespaceInfo {
	this := NamespaceInfo{}
	return &this
}

// NewNamespaceInfoWithDefaults instantiates a new NamespaceInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNamespaceInfoWithDefaults() *NamespaceInfo {
	this := NamespaceInfo{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NamespaceInfo) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamespaceInfo) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *NamespaceInfo) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NamespaceInfo) SetName(v string) {
	o.Name = &v
}

// GetAppId returns the AppId field value if set, zero value otherwise.
func (o *NamespaceInfo) GetAppId() string {
	if o == nil || o.AppId == nil {
		var ret string
		return ret
	}
	return *o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamespaceInfo) GetAppIdOk() (*string, bool) {
	if o == nil || o.AppId == nil {
		return nil, false
	}
	return o.AppId, true
}

// HasAppId returns a boolean if a field has been set.
func (o *NamespaceInfo) HasAppId() bool {
	if o != nil && o.AppId != nil {
		return true
	}

	return false
}

// SetAppId gets a reference to the given string and assigns it to the AppId field.
func (o *NamespaceInfo) SetAppId(v string) {
	o.AppId = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *NamespaceInfo) GetComment() string {
	if o == nil || o.Comment == nil {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamespaceInfo) GetCommentOk() (*string, bool) {
	if o == nil || o.Comment == nil {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *NamespaceInfo) HasComment() bool {
	if o != nil && o.Comment != nil {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *NamespaceInfo) SetComment(v string) {
	o.Comment = &v
}

// GetFormat returns the Format field value if set, zero value otherwise.
func (o *NamespaceInfo) GetFormat() string {
	if o == nil || o.Format == nil {
		var ret string
		return ret
	}
	return *o.Format
}

// GetFormatOk returns a tuple with the Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamespaceInfo) GetFormatOk() (*string, bool) {
	if o == nil || o.Format == nil {
		return nil, false
	}
	return o.Format, true
}

// HasFormat returns a boolean if a field has been set.
func (o *NamespaceInfo) HasFormat() bool {
	if o != nil && o.Format != nil {
		return true
	}

	return false
}

// SetFormat gets a reference to the given string and assigns it to the Format field.
func (o *NamespaceInfo) SetFormat(v string) {
	o.Format = &v
}

// GetIsPublic returns the IsPublic field value if set, zero value otherwise.
func (o *NamespaceInfo) GetIsPublic() bool {
	if o == nil || o.IsPublic == nil {
		var ret bool
		return ret
	}
	return *o.IsPublic
}

// GetIsPublicOk returns a tuple with the IsPublic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamespaceInfo) GetIsPublicOk() (*bool, bool) {
	if o == nil || o.IsPublic == nil {
		return nil, false
	}
	return o.IsPublic, true
}

// HasIsPublic returns a boolean if a field has been set.
func (o *NamespaceInfo) HasIsPublic() bool {
	if o != nil && o.IsPublic != nil {
		return true
	}

	return false
}

// SetIsPublic gets a reference to the given bool and assigns it to the IsPublic field.
func (o *NamespaceInfo) SetIsPublic(v bool) {
	o.IsPublic = &v
}

// GetDataChangeCreatedBy returns the DataChangeCreatedBy field value if set, zero value otherwise.
func (o *NamespaceInfo) GetDataChangeCreatedBy() string {
	if o == nil || o.DataChangeCreatedBy == nil {
		var ret string
		return ret
	}
	return *o.DataChangeCreatedBy
}

// GetDataChangeCreatedByOk returns a tuple with the DataChangeCreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamespaceInfo) GetDataChangeCreatedByOk() (*string, bool) {
	if o == nil || o.DataChangeCreatedBy == nil {
		return nil, false
	}
	return o.DataChangeCreatedBy, true
}

// HasDataChangeCreatedBy returns a boolean if a field has been set.
func (o *NamespaceInfo) HasDataChangeCreatedBy() bool {
	if o != nil && o.DataChangeCreatedBy != nil {
		return true
	}

	return false
}

// SetDataChangeCreatedBy gets a reference to the given string and assigns it to the DataChangeCreatedBy field.
func (o *NamespaceInfo) SetDataChangeCreatedBy(v string) {
	o.DataChangeCreatedBy = &v
}

// GetDataChangeLastModifiedBy returns the DataChangeLastModifiedBy field value if set, zero value otherwise.
func (o *NamespaceInfo) GetDataChangeLastModifiedBy() string {
	if o == nil || o.DataChangeLastModifiedBy == nil {
		var ret string
		return ret
	}
	return *o.DataChangeLastModifiedBy
}

// GetDataChangeLastModifiedByOk returns a tuple with the DataChangeLastModifiedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamespaceInfo) GetDataChangeLastModifiedByOk() (*string, bool) {
	if o == nil || o.DataChangeLastModifiedBy == nil {
		return nil, false
	}
	return o.DataChangeLastModifiedBy, true
}

// HasDataChangeLastModifiedBy returns a boolean if a field has been set.
func (o *NamespaceInfo) HasDataChangeLastModifiedBy() bool {
	if o != nil && o.DataChangeLastModifiedBy != nil {
		return true
	}

	return false
}

// SetDataChangeLastModifiedBy gets a reference to the given string and assigns it to the DataChangeLastModifiedBy field.
func (o *NamespaceInfo) SetDataChangeLastModifiedBy(v string) {
	o.DataChangeLastModifiedBy = &v
}

// GetDataChangeCreatedTime returns the DataChangeCreatedTime field value if set, zero value otherwise.
func (o *NamespaceInfo) GetDataChangeCreatedTime() string {
	if o == nil || o.DataChangeCreatedTime == nil {
		var ret string
		return ret
	}
	return *o.DataChangeCreatedTime
}

// GetDataChangeCreatedTimeOk returns a tuple with the DataChangeCreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamespaceInfo) GetDataChangeCreatedTimeOk() (*string, bool) {
	if o == nil || o.DataChangeCreatedTime == nil {
		return nil, false
	}
	return o.DataChangeCreatedTime, true
}

// HasDataChangeCreatedTime returns a boolean if a field has been set.
func (o *NamespaceInfo) HasDataChangeCreatedTime() bool {
	if o != nil && o.DataChangeCreatedTime != nil {
		return true
	}

	return false
}

// SetDataChangeCreatedTime gets a reference to the given string and assigns it to the DataChangeCreatedTime field.
func (o *NamespaceInfo) SetDataChangeCreatedTime(v string) {
	o.DataChangeCreatedTime = &v
}

// GetDataChangeLastModifiedTime returns the DataChangeLastModifiedTime field value if set, zero value otherwise.
func (o *NamespaceInfo) GetDataChangeLastModifiedTime() string {
	if o == nil || o.DataChangeLastModifiedTime == nil {
		var ret string
		return ret
	}
	return *o.DataChangeLastModifiedTime
}

// GetDataChangeLastModifiedTimeOk returns a tuple with the DataChangeLastModifiedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamespaceInfo) GetDataChangeLastModifiedTimeOk() (*string, bool) {
	if o == nil || o.DataChangeLastModifiedTime == nil {
		return nil, false
	}
	return o.DataChangeLastModifiedTime, true
}

// HasDataChangeLastModifiedTime returns a boolean if a field has been set.
func (o *NamespaceInfo) HasDataChangeLastModifiedTime() bool {
	if o != nil && o.DataChangeLastModifiedTime != nil {
		return true
	}

	return false
}

// SetDataChangeLastModifiedTime gets a reference to the given string and assigns it to the DataChangeLastModifiedTime field.
func (o *NamespaceInfo) SetDataChangeLastModifiedTime(v string) {
	o.DataChangeLastModifiedTime = &v
}

func (o NamespaceInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.AppId != nil {
		toSerialize["appId"] = o.AppId
	}
	if o.Comment != nil {
		toSerialize["comment"] = o.Comment
	}
	if o.Format != nil {
		toSerialize["format"] = o.Format
	}
	if o.IsPublic != nil {
		toSerialize["isPublic"] = o.IsPublic
	}
	if o.DataChangeCreatedBy != nil {
		toSerialize["dataChangeCreatedBy"] = o.DataChangeCreatedBy
	}
	if o.DataChangeLastModifiedBy != nil {
		toSerialize["dataChangeLastModifiedBy"] = o.DataChangeLastModifiedBy
	}
	if o.DataChangeCreatedTime != nil {
		toSerialize["dataChangeCreatedTime"] = o.DataChangeCreatedTime
	}
	if o.DataChangeLastModifiedTime != nil {
		toSerialize["dataChangeLastModifiedTime"] = o.DataChangeLastModifiedTime
	}
	return json.Marshal(toSerialize)
}

type NullableNamespaceInfo struct {
	value *NamespaceInfo
	isSet bool
}

func (v NullableNamespaceInfo) Get() *NamespaceInfo {
	return v.value
}

func (v *NullableNamespaceInfo) Set(val *NamespaceInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableNamespaceInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableNamespaceInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNamespaceInfo(val *NamespaceInfo) *NullableNamespaceInfo {
	return &NullableNamespaceInfo{value: val, isSet: true}
}

func (v NullableNamespaceInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNamespaceInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
