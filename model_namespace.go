/*
 * 阿波罗客户端
 *
 * 阿波罗客户端
 *
 * API version: v0.0.2
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Namespace struct for Namespace
type Namespace struct {
	AppId                      *string  `json:"appId,omitempty"`
	ClusterName                *string  `json:"clusterName,omitempty"`
	NamespaceName              *string  `json:"namespaceName,omitempty"`
	Comment                    *string  `json:"comment,omitempty"`
	Format                     *string  `json:"format,omitempty"`
	IsPublic                   *bool    `json:"isPublic,omitempty"`
	Items                      *[]Field `json:"items,omitempty"`
	DataChangeCreatedBy        *string  `json:"dataChangeCreatedBy,omitempty"`
	DataChangeLastModifiedBy   *string  `json:"dataChangeLastModifiedBy,omitempty"`
	DataChangeCreatedTime      *string  `json:"dataChangeCreatedTime,omitempty"`
	DataChangeLastModifiedTime *string  `json:"dataChangeLastModifiedTime,omitempty"`
}

// NewNamespace instantiates a new Namespace object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNamespace() *Namespace {
	this := Namespace{}
	return &this
}

// NewNamespaceWithDefaults instantiates a new Namespace object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNamespaceWithDefaults() *Namespace {
	this := Namespace{}
	return &this
}

// GetAppId returns the AppId field value if set, zero value otherwise.
func (o *Namespace) GetAppId() string {
	if o == nil || o.AppId == nil {
		var ret string
		return ret
	}
	return *o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Namespace) GetAppIdOk() (*string, bool) {
	if o == nil || o.AppId == nil {
		return nil, false
	}
	return o.AppId, true
}

// HasAppId returns a boolean if a field has been set.
func (o *Namespace) HasAppId() bool {
	if o != nil && o.AppId != nil {
		return true
	}

	return false
}

// SetAppId gets a reference to the given string and assigns it to the AppId field.
func (o *Namespace) SetAppId(v string) {
	o.AppId = &v
}

// GetClusterName returns the ClusterName field value if set, zero value otherwise.
func (o *Namespace) GetClusterName() string {
	if o == nil || o.ClusterName == nil {
		var ret string
		return ret
	}
	return *o.ClusterName
}

// GetClusterNameOk returns a tuple with the ClusterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Namespace) GetClusterNameOk() (*string, bool) {
	if o == nil || o.ClusterName == nil {
		return nil, false
	}
	return o.ClusterName, true
}

// HasClusterName returns a boolean if a field has been set.
func (o *Namespace) HasClusterName() bool {
	if o != nil && o.ClusterName != nil {
		return true
	}

	return false
}

// SetClusterName gets a reference to the given string and assigns it to the ClusterName field.
func (o *Namespace) SetClusterName(v string) {
	o.ClusterName = &v
}

// GetNamespaceName returns the NamespaceName field value if set, zero value otherwise.
func (o *Namespace) GetNamespaceName() string {
	if o == nil || o.NamespaceName == nil {
		var ret string
		return ret
	}
	return *o.NamespaceName
}

// GetNamespaceNameOk returns a tuple with the NamespaceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Namespace) GetNamespaceNameOk() (*string, bool) {
	if o == nil || o.NamespaceName == nil {
		return nil, false
	}
	return o.NamespaceName, true
}

// HasNamespaceName returns a boolean if a field has been set.
func (o *Namespace) HasNamespaceName() bool {
	if o != nil && o.NamespaceName != nil {
		return true
	}

	return false
}

// SetNamespaceName gets a reference to the given string and assigns it to the NamespaceName field.
func (o *Namespace) SetNamespaceName(v string) {
	o.NamespaceName = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *Namespace) GetComment() string {
	if o == nil || o.Comment == nil {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Namespace) GetCommentOk() (*string, bool) {
	if o == nil || o.Comment == nil {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *Namespace) HasComment() bool {
	if o != nil && o.Comment != nil {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *Namespace) SetComment(v string) {
	o.Comment = &v
}

// GetFormat returns the Format field value if set, zero value otherwise.
func (o *Namespace) GetFormat() string {
	if o == nil || o.Format == nil {
		var ret string
		return ret
	}
	return *o.Format
}

// GetFormatOk returns a tuple with the Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Namespace) GetFormatOk() (*string, bool) {
	if o == nil || o.Format == nil {
		return nil, false
	}
	return o.Format, true
}

// HasFormat returns a boolean if a field has been set.
func (o *Namespace) HasFormat() bool {
	if o != nil && o.Format != nil {
		return true
	}

	return false
}

// SetFormat gets a reference to the given string and assigns it to the Format field.
func (o *Namespace) SetFormat(v string) {
	o.Format = &v
}

// GetIsPublic returns the IsPublic field value if set, zero value otherwise.
func (o *Namespace) GetIsPublic() bool {
	if o == nil || o.IsPublic == nil {
		var ret bool
		return ret
	}
	return *o.IsPublic
}

// GetIsPublicOk returns a tuple with the IsPublic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Namespace) GetIsPublicOk() (*bool, bool) {
	if o == nil || o.IsPublic == nil {
		return nil, false
	}
	return o.IsPublic, true
}

// HasIsPublic returns a boolean if a field has been set.
func (o *Namespace) HasIsPublic() bool {
	if o != nil && o.IsPublic != nil {
		return true
	}

	return false
}

// SetIsPublic gets a reference to the given bool and assigns it to the IsPublic field.
func (o *Namespace) SetIsPublic(v bool) {
	o.IsPublic = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *Namespace) GetItems() []Field {
	if o == nil || o.Items == nil {
		var ret []Field
		return ret
	}
	return *o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Namespace) GetItemsOk() (*[]Field, bool) {
	if o == nil || o.Items == nil {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *Namespace) HasItems() bool {
	if o != nil && o.Items != nil {
		return true
	}

	return false
}

// SetItems gets a reference to the given []Field and assigns it to the Items field.
func (o *Namespace) SetItems(v []Field) {
	o.Items = &v
}

// GetDataChangeCreatedBy returns the DataChangeCreatedBy field value if set, zero value otherwise.
func (o *Namespace) GetDataChangeCreatedBy() string {
	if o == nil || o.DataChangeCreatedBy == nil {
		var ret string
		return ret
	}
	return *o.DataChangeCreatedBy
}

// GetDataChangeCreatedByOk returns a tuple with the DataChangeCreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Namespace) GetDataChangeCreatedByOk() (*string, bool) {
	if o == nil || o.DataChangeCreatedBy == nil {
		return nil, false
	}
	return o.DataChangeCreatedBy, true
}

// HasDataChangeCreatedBy returns a boolean if a field has been set.
func (o *Namespace) HasDataChangeCreatedBy() bool {
	if o != nil && o.DataChangeCreatedBy != nil {
		return true
	}

	return false
}

// SetDataChangeCreatedBy gets a reference to the given string and assigns it to the DataChangeCreatedBy field.
func (o *Namespace) SetDataChangeCreatedBy(v string) {
	o.DataChangeCreatedBy = &v
}

// GetDataChangeLastModifiedBy returns the DataChangeLastModifiedBy field value if set, zero value otherwise.
func (o *Namespace) GetDataChangeLastModifiedBy() string {
	if o == nil || o.DataChangeLastModifiedBy == nil {
		var ret string
		return ret
	}
	return *o.DataChangeLastModifiedBy
}

// GetDataChangeLastModifiedByOk returns a tuple with the DataChangeLastModifiedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Namespace) GetDataChangeLastModifiedByOk() (*string, bool) {
	if o == nil || o.DataChangeLastModifiedBy == nil {
		return nil, false
	}
	return o.DataChangeLastModifiedBy, true
}

// HasDataChangeLastModifiedBy returns a boolean if a field has been set.
func (o *Namespace) HasDataChangeLastModifiedBy() bool {
	if o != nil && o.DataChangeLastModifiedBy != nil {
		return true
	}

	return false
}

// SetDataChangeLastModifiedBy gets a reference to the given string and assigns it to the DataChangeLastModifiedBy field.
func (o *Namespace) SetDataChangeLastModifiedBy(v string) {
	o.DataChangeLastModifiedBy = &v
}

// GetDataChangeCreatedTime returns the DataChangeCreatedTime field value if set, zero value otherwise.
func (o *Namespace) GetDataChangeCreatedTime() string {
	if o == nil || o.DataChangeCreatedTime == nil {
		var ret string
		return ret
	}
	return *o.DataChangeCreatedTime
}

// GetDataChangeCreatedTimeOk returns a tuple with the DataChangeCreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Namespace) GetDataChangeCreatedTimeOk() (*string, bool) {
	if o == nil || o.DataChangeCreatedTime == nil {
		return nil, false
	}
	return o.DataChangeCreatedTime, true
}

// HasDataChangeCreatedTime returns a boolean if a field has been set.
func (o *Namespace) HasDataChangeCreatedTime() bool {
	if o != nil && o.DataChangeCreatedTime != nil {
		return true
	}

	return false
}

// SetDataChangeCreatedTime gets a reference to the given string and assigns it to the DataChangeCreatedTime field.
func (o *Namespace) SetDataChangeCreatedTime(v string) {
	o.DataChangeCreatedTime = &v
}

// GetDataChangeLastModifiedTime returns the DataChangeLastModifiedTime field value if set, zero value otherwise.
func (o *Namespace) GetDataChangeLastModifiedTime() string {
	if o == nil || o.DataChangeLastModifiedTime == nil {
		var ret string
		return ret
	}
	return *o.DataChangeLastModifiedTime
}

// GetDataChangeLastModifiedTimeOk returns a tuple with the DataChangeLastModifiedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Namespace) GetDataChangeLastModifiedTimeOk() (*string, bool) {
	if o == nil || o.DataChangeLastModifiedTime == nil {
		return nil, false
	}
	return o.DataChangeLastModifiedTime, true
}

// HasDataChangeLastModifiedTime returns a boolean if a field has been set.
func (o *Namespace) HasDataChangeLastModifiedTime() bool {
	if o != nil && o.DataChangeLastModifiedTime != nil {
		return true
	}

	return false
}

// SetDataChangeLastModifiedTime gets a reference to the given string and assigns it to the DataChangeLastModifiedTime field.
func (o *Namespace) SetDataChangeLastModifiedTime(v string) {
	o.DataChangeLastModifiedTime = &v
}

func (o Namespace) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AppId != nil {
		toSerialize["appId"] = o.AppId
	}
	if o.ClusterName != nil {
		toSerialize["clusterName"] = o.ClusterName
	}
	if o.NamespaceName != nil {
		toSerialize["namespaceName"] = o.NamespaceName
	}
	if o.Comment != nil {
		toSerialize["comment"] = o.Comment
	}
	if o.Format != nil {
		toSerialize["format"] = o.Format
	}
	if o.IsPublic != nil {
		toSerialize["isPublic"] = o.IsPublic
	}
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
	if o.DataChangeCreatedBy != nil {
		toSerialize["dataChangeCreatedBy"] = o.DataChangeCreatedBy
	}
	if o.DataChangeLastModifiedBy != nil {
		toSerialize["dataChangeLastModifiedBy"] = o.DataChangeLastModifiedBy
	}
	if o.DataChangeCreatedTime != nil {
		toSerialize["dataChangeCreatedTime"] = o.DataChangeCreatedTime
	}
	if o.DataChangeLastModifiedTime != nil {
		toSerialize["dataChangeLastModifiedTime"] = o.DataChangeLastModifiedTime
	}
	return json.Marshal(toSerialize)
}

type NullableNamespace struct {
	value *Namespace
	isSet bool
}

func (v NullableNamespace) Get() *Namespace {
	return v.value
}

func (v *NullableNamespace) Set(val *Namespace) {
	v.value = val
	v.isSet = true
}

func (v NullableNamespace) IsSet() bool {
	return v.isSet
}

func (v *NullableNamespace) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNamespace(val *Namespace) *NullableNamespace {
	return &NullableNamespace{value: val, isSet: true}
}

func (v NullableNamespace) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNamespace) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
